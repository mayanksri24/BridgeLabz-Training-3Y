//1.Compare Two Strings Using charAt() vs equals()
import java.util.Scanner;

public class StringCompareCharAt {
    public static boolean compareStrings(String s1, String s2) {
        if (s1.length() != s2.length()) return false;
        for (int i = 0; i < s1.length(); i++) {
            if (s1.charAt(i) != s2.charAt(i)) return false;
        }
        return true;
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter first string: ");
        String str1 = sc.next();
        System.out.print("Enter second string: ");
        String str2 = sc.next();

        boolean userDefinedResult = compareStrings(str1, str2);
        boolean builtInResult = str1.equals(str2);

        System.out.println("User-defined comparison result: " + userDefinedResult);
        System.out.println("Built-in equals() result: " + builtInResult);

        sc.close();
    }
}

//2.Substring Using charAt() vs Built-in substring()
import java.util.Scanner;

public class SubstringCompare {
    public static String customSubstring(String text, int start, int end) {
        String result = "";
        for (int i = start; i < end; i++) {
            result += text.charAt(i);
        }
        return result;
    }

    public static boolean compareStrings(String s1, String s2) {
        if (s1.length() != s2.length()) return false;
        for (int i = 0; i < s1.length(); i++) {
            if (s1.charAt(i) != s2.charAt(i)) return false;
        }
        return true;
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter text: ");
        String text = sc.next();
        System.out.print("Enter start index: ");
        int start = sc.nextInt();
        System.out.print("Enter end index: ");
        int end = sc.nextInt();

        String custom = customSubstring(text, start, end);
        String builtin = text.substring(start, end);

        System.out.println("Custom substring: " + custom);
        System.out.println("Built-in substring: " + builtin);
        System.out.println("Are both equal? " + compareStrings(custom, builtin));

        sc.close();
    }
}

//3.Return All Characters Without toCharArray()
import java.util.Scanner;

public class StringToCharArray {
    public static char[] customToCharArray(String text) {
        char[] result = new char[text.length()];
        for (int i = 0; i < text.length(); i++) {
            result[i] = text.charAt(i);
        }
        return result;
    }

    public static boolean compareArrays(char[] a1, char[] a2) {
        if (a1.length != a2.length) return false;
        for (int i = 0; i < a1.length; i++) {
            if (a1[i] != a2[i]) return false;
        }
        return true;
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter text: ");
        String text = sc.next();

        char[] custom = customToCharArray(text);
        char[] builtin = text.toCharArray();

        System.out.println("Arrays equal? " + compareArrays(custom, builtin));
        sc.close();
    }
}

//4.Demonstrate NullPointerException
public class NullPointerDemo {
    public static void generateException() {
        String text = null;
        System.out.println(text.length()); // NPE
    }

    public static void handleException() {
        try {
            String text = null;
            System.out.println(text.length());
        } catch (NullPointerException e) {
            System.out.println("Caught NullPointerException!");
        }
    }

    public static void main(String[] args) {
        // generateException(); // Uncomment to see abrupt stop
        handleException();
    }
}

//5.Demonstrate StringIndexOutOfBoundsException
import java.util.Scanner;

public class StringIndexOutOfBoundsDemo {
    public static void generateException(String text) {
        System.out.println(text.charAt(text.length())); // out of range
    }

    public static void handleException(String text) {
        try {
            System.out.println(text.charAt(text.length()));
        } catch (StringIndexOutOfBoundsException e) {
            System.out.println("Caught StringIndexOutOfBoundsException!");
        }
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter text: ");
        String input = sc.next();
        // generateException(input);
        handleException(input);
        sc.close();
    }
}

//6.Demonstrate IllegalArgumentException
import java.util.Scanner;

public class IllegalArgumentDemo {
    public static void generateException(String text) {
        System.out.println(text.substring(5, 2)); // start > end
    }

    public static void handleException(String text) {
        try {
            System.out.println(text.substring(5, 2));
        } catch (IllegalArgumentException e) {
            System.out.println("Caught IllegalArgumentException!");
        } catch (RuntimeException e) {
            System.out.println("Caught RuntimeException!");
        }
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter text: ");
        String input = sc.next();
        // generateException(input);
        handleException(input);
        sc.close();
    }
}

//7.Demonstrate NumberFormatException
import java.util.Scanner;

public class NumberFormatDemo {
    public static void generateException(String text) {
        int num = Integer.parseInt(text); // not a number
        System.out.println(num);
    }

    public static void handleException(String text) {
        try {
            int num = Integer.parseInt(text);
            System.out.println("Converted number: " + num);
        } catch (NumberFormatException e) {
            System.out.println("Caught NumberFormatException!");
        } catch (RuntimeException e) {
            System.out.println("Caught RuntimeException!");
        }
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter a string: ");
        String input = sc.next();
        // generateException(input);
        handleException(input);
        sc.close();
    }
}

//8.Demonstrate ArrayIndexOutOfBoundsException
import java.util.Scanner;

public class ArrayIndexOutOfBoundsDemo {
    public static void generateException(String[] arr) {
        System.out.println(arr[arr.length]); // out of range
    }

    public static void handleException(String[] arr) {
        try {
            System.out.println(arr[arr.length]);
        } catch (ArrayIndexOutOfBoundsException e) {
            System.out.println("Caught ArrayIndexOutOfBoundsException!");
        } catch (RuntimeException e) {
            System.out.println("Caught RuntimeException!");
        }
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String[] names = new String[3];
        System.out.println("Enter 3 names:");
        for (int i = 0; i < 3; i++) {
            names[i] = sc.next();
        }
        // generateException(names);
        handleException(names);
        sc.close();
    }
}

//9.Convert to Uppercase (Manual vs Built-in)
import java.util.Scanner;

public class ToUpperCaseDemo {
    public static String toUpperCustom(String text) {
        String result = "";
        for (int i = 0; i < text.length(); i++) {
            char ch = text.charAt(i);
            if (ch >= 'a' && ch <= 'z') {
                result += (char) (ch - 32);
            } else {
                result += ch;
            }
        }
        return result;
    }

    public static boolean compareStrings(String s1, String s2) {
        if (s1.length() != s2.length()) return false;
        for (int i = 0; i < s1.length(); i++) {
            if (s1.charAt(i) != s2.charAt(i)) return false;
        }
        return true;
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter text: ");
        String input = sc.nextLine();

        String custom = toUpperCustom(input);
        String builtin = input.toUpperCase();

        System.out.println("Custom uppercase: " + custom);
        System.out.println("Built-in uppercase: " + builtin);
        System.out.println("Match? " + compareStrings(custom, builtin));
        sc.close();
    }
}

//10.Convert to Lowercase (Manual vs Built-in)
import java.util.Scanner;

public class ToLowerCaseDemo {
    public static String toLowerCustom(String text) {
        String result = "";
        for (int i = 0; i < text.length(); i++) {
            char ch = text.charAt(i);
            if (ch >= 'A' && ch <= 'Z') {
                result += (char) (ch + 32);
            } else {
                result += ch;
            }
        }
        return result;
    }

    public static boolean compareStrings(String s1, String s2) {
        if (s1.length() != s2.length()) return false;
        for (int i = 0; i < s1.length(); i++) {
            if (s1.charAt(i) != s2.charAt(i)) return false;
        }
        return true;
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter text: ");
        String input = sc.nextLine();

        String custom = toLowerCustom(input);
        String builtin = input.toLowerCase();

        System.out.println("Custom lowercase: " + custom);
        System.out.println("Built-in lowercase: " + builtin);
        System.out.println("Match? " + compareStrings(custom, builtin));
        sc.close();
    }
}

//11.Find and return the length of a string without using length()
import java.util.Scanner;

public class StringLength {
    // Method to find length without using length()
    public static int findLength(String str) {
        int count = 0;
        try {
            while (true) {
                str.charAt(count); // will throw exception when count exceeds
                count++;
            }
        } catch (StringIndexOutOfBoundsException e) {
            return count; // return length once exception occurs
        }
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        // Taking input
        System.out.print("Enter a string: ");
        String input = sc.next();

        // Using user-defined method
        int myLength = findLength(input);

        // Using built-in method for verification
        int builtInLength = input.length();

        System.out.println("Length (User-defined): " + myLength);
        System.out.println("Length (Built-in): " + builtInLength);

        sc.close();
    }
}

//12.Split the text into words (without using split()) & compare
import java.util.Scanner;

public class SplitWordsDemo {

    // Method to find length (without length())
    public static int findLength(String str) {
        int count = 0;
        try {
            while (true) {
                str.charAt(count);
                count++;
            }
        } catch (StringIndexOutOfBoundsException e) {
            return count;
        }
    }

    // Method to split words manually
    public static String[] splitWords(String text) {
        int n = findLength(text);
        int spaceCount = 0;

        // Count spaces
        for (int i = 0; i < n; i++) {
            if (text.charAt(i) == ' ') {
                spaceCount++;
            }
        }

        // words = spaces+1
        String[] words = new String[spaceCount + 1];
        int wordIndex = 0, start = 0;

        for (int i = 0; i < n; i++) {
            if (text.charAt(i) == ' ') {
                words[wordIndex++] = text.substring(start, i);
                start = i + 1;
            }
        }
        words[wordIndex] = text.substring(start, n);

        return words;
    }

    // Method to compare two string arrays
    public static boolean compareArrays(String[] arr1, String[] arr2) {
        if (arr1.length != arr2.length) return false;
        for (int i = 0; i < arr1.length; i++) {
            if (!arr1[i].equals(arr2[i])) return false;
        }
        return true;
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        System.out.print("Enter a sentence: ");
        String text = sc.nextLine();

        String[] userWords = splitWords(text);
        String[] builtInWords = text.split(" ");

        System.out.println("\nWords (User-defined): ");
        for (String w : userWords) System.out.println(w);

        System.out.println("\nWords (Built-in split()): ");
        for (String w : builtInWords) System.out.println(w);

        boolean isSame = compareArrays(userWords, builtInWords);
        System.out.println("\nComparison result: " + (isSame ? "MATCH" : "DO NOT MATCH"));

        sc.close();
    }
}

//13.Split the text into words and return the words along with their lengths in a 2D array
import java.util.Scanner;

public class WordsWithLengthDemo {

    // Method to find string length without using length()
    public static int findLength(String str) {
        int count = 0;
        try {
            while (true) {
                str.charAt(count);
                count++;
            }
        } catch (StringIndexOutOfBoundsException e) {
            return count;
        }
    }

    // Method to split words manually
    public static String[] splitWords(String text) {
        int n = findLength(text);
        int spaceCount = 0;

        // Count spaces
        for (int i = 0; i < n; i++) {
            if (text.charAt(i) == ' ') spaceCount++;
        }

        String[] words = new String[spaceCount + 1];
        int wordIndex = 0, start = 0;

        for (int i = 0; i < n; i++) {
            if (text.charAt(i) == ' ') {
                words[wordIndex++] = text.substring(start, i);
                start = i + 1;
            }
        }
        words[wordIndex] = text.substring(start, n);

//14.Split words and find the shortest & longest strings
import java.util.Scanner;

public class ShortestLongestWord {

    // Method to find length without length()
    public static int findLength(String str) {
        int count = 0;
        try {
            while (true) {
                str.charAt(count);
                count++;
            }
        } catch (StringIndexOutOfBoundsException e) {
            return count;
        }
    }

    // Split words manually
    public static String[] splitWords(String text) {
        int n = findLength(text);
        int spaceCount = 0;
        for (int i = 0; i < n; i++) {
            if (text.charAt(i) == ' ') spaceCount++;
        }
        String[] words = new String[spaceCount + 1];
        int index = 0, start = 0;
        for (int i = 0; i < n; i++) {
            if (text.charAt(i) == ' ') {
                words[index++] = text.substring(start, i);
                start = i + 1;
            }
        }
        words[index] = text.substring(start, n);
        return words;
    }

    // Method to find shortest & longest
    public static String[] findShortestLongest(String[] words) {
        String shortest = words[0], longest = words[0];

        for (String w : words) {
            if (findLength(w) < findLength(shortest)) shortest = w;
            if (findLength(w) > findLength(longest)) longest = w;
        }

        return new String[]{shortest, longest};
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter a sentence: ");
        String text = sc.nextLine();

        String[] words = splitWords(text);
        String[] result = findShortestLongest(words);

        System.out.println("\nShortest Word: " + result[0] + " (Length: " + findLength(result[0]) + ")");
        System.out.println("Longest Word: " + result[1] + " (Length: " + findLength(result[1]) + ")");
        sc.close();
    }
}

//15.Find vowels & consonants count
import java.util.Scanner;

public class VowelConsonantCount {

    // Check type
    public static String checkCharType(char ch) {
        if (ch >= 'A' && ch <= 'Z') ch = (char)(ch + 32); // convert to lowercase

        if (ch >= 'a' && ch <= 'z') {
            if (ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u')
                return "Vowel";
            else
                return "Consonant";
        }
        return "Not a Letter";
    }

    // Count vowels and consonants
    public static int[] countVowelsConsonants(String text) {
        int vowels = 0, consonants = 0;
        for (int i = 0; i < text.length(); i++) {
            String type = checkCharType(text.charAt(i));
            if (type.equals("Vowel")) vowels++;
            else if (type.equals("Consonant")) consonants++;
        }
        return new int[]{vowels, consonants};
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter a text: ");
        String text = sc.nextLine();

        int[] result = countVowelsConsonants(text);

        System.out.println("\nVowels: " + result[0]);
        System.out.println("Consonants: " + result[1]);
        sc.close();
    }
}

//16.Vowels & Consonants with character type
import java.util.Scanner;

public class VowelConsonantType {

    public static String checkCharType(char ch) {
        if (ch >= 'A' && ch <= 'Z') ch = (char)(ch + 32);
        if (ch >= 'a' && ch <= 'z') {
            if ("aeiou".indexOf(ch) != -1) return "Vowel";
            else return "Consonant";
        }
        return "Not a Letter";
    }

    public static String[][] classifyCharacters(String text) {
        String[][] result = new String[text.length()][2];
        for (int i = 0; i < text.length(); i++) {
            result[i][0] = String.valueOf(text.charAt(i));
            result[i][1] = checkCharType(text.charAt(i));
        }
        return result;
    }

    public static void display(String[][] arr) {
        System.out.printf("%-10s %-15s\n", "Char", "Type");
        System.out.println("----------------------");
        for (String[] row : arr) {
            System.out.printf("%-10s %-15s\n", row[0], row[1]);
        }
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter a text: ");
        String text = sc.nextLine();

        String[][] result = classifyCharacters(text);
        display(result);
        sc.close();
    }
}

//17.Trim leading & trailing spaces
import java.util.Scanner;

public class TrimStringDemo {

  
    public static int[] trimSpaces(String str) {
        int start = 0, end = str.length() - 1;

        while (start <= end && str.charAt(start) == ' ') start++;
        while (end >= start && str.charAt(end) == ' ') end--;

        return new int[]{start, end};
    }

    
    public static String substringCustom(String str, int start, int end) {
        String result = "";
        for (int i = start; i <= end; i++) {
            result += str.charAt(i);
        }
        return result;
    }

    public static boolean compareStrings(String s1, String s2) {
        if (s1.length() != s2.length()) return false;
        for (int i = 0; i < s1.length(); i++) {
            if (s1.charAt

//18.Check if 10 students can vote
import java.util.Random;
import java.util.Scanner;

public class StudentVotingDemo {

    // Method to generate random ages for n students
    public static int[] generateAges(int n) {
        Random rand = new Random();
        int[] ages = new int[n];
        for (int i = 0; i < n; i++) {
            ages[i] = 10 + rand.nextInt(90); // random 2-digit age
        }
        return ages;
    }

    // Method to check voting eligibility
    public static String[][] checkVoting(int[] ages) {
        String[][] result = new String[ages.length][2];
        for (int i = 0; i < ages.length; i++) {
            result[i][0] = String.valueOf(ages[i]);
            if (ages[i] < 0) {
                result[i][1] = "Invalid Age";
            } else if (ages[i] >= 18) {
                result[i][1] = "Can Vote";
            } else {
                result[i][1] = "Cannot Vote";
            }
        }
        return result;
    }

    // Method to display results
    public static void display(String[][] data) {
        System.out.printf("%-10s %-15s\n", "Age", "Eligibility");
        System.out.println("--------------------------");
        for (String[] row : data) {
            System.out.printf("%-10s %-15s\n", row[0], row[1]);
        }
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        System.out.print("Enter number of students: ");
        int n = sc.nextInt();

        int[] ages = generateAges(n);
        String[][] results = checkVoting(ages);

        System.out.println("\nVoting Eligibility Results:");
        display(results);

        sc.close();
    }
}

//19.Rock-Paper-Scissors Game
import java.util.Random;
import java.util.Scanner;

public class RockPaperScissorsDemo {

    // Method to get computer choice
    public static String getComputerChoice() {
        String[] choices = {"Rock", "Paper", "Scissors"};
        Random rand = new Random();
        return choices[rand.nextInt(3)];
    }

    // Method to determine winner
    public static String findWinner(String user, String comp) {
        if (user.equals(comp)) return "Draw";
        if ((user.equals("Rock") && comp.equals("Scissors")) ||
            (user.equals("Paper") && comp.equals("Rock")) ||
            (user.equals("Scissors") && comp.equals("Paper"))) {
            return "User";
        }
        return "Computer";
    }

    // Method to display results in table
    public static void display(String[][] data, int userWins, int compWins, int games) {
        System.out.printf("%-10s %-12s %-10s\n", "Game", "Computer", "Result");
        System.out.println("-----------------------------------");
        for (int i = 0; i < data.length; i++) {
            System.out.printf("%-10d %-12s %-10s\n", (i + 1), data[i][0], data[i][1]);
        }
        System.out.println("-----------------------------------");
        System.out.println("User Wins: " + userWins + " (" + (userWins * 100 / games) + "%)");
        System.out.println("Computer Wins: " + compWins + " (" + (compWins * 100 / games) + "%)");
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        System.out.print("Enter number of games: ");
        int games = sc.nextInt();

        String[][] results = new String[games][2];
        int userWins = 0, compWins = 0;

        for (int i = 0; i < games; i++) {
            System.out.print("Enter your choice (Rock/Paper/Scissors): ");
            String userChoice = sc.next();

            String compChoice = getComputerChoice();
            String winner = findWinner(userChoice, compChoice);

            results[i][0] = compChoice;
            results[i][1] = winner;

            if (winner.equals("User")) userWins++;
            else if (winner.equals("Computer")) compWins++;
        }

        System.out.println("\nGame Results:");
        display(results, userWins, compWins, games);

        sc.close();
    }
}

//20.Student Marks, Percentage, and Grades
import java.util.Random;
import java.util.Scanner;

public class StudentScorecardDemo {

    // Generate random PCM scores for n students
    public static int[][] generateScores(int n) {
        Random rand = new Random();
        int[][] scores = new int[n][3];
        for (int i = 0; i < n; i++) {
            scores[i][0] = 40 + rand.nextInt(61); // Physics
            scores[i][1] = 40 + rand.nextInt(61); // Chemistry
            scores[i][2] = 40 + rand.nextInt(61); // Math
        }
        return scores;
    }

    // Calculate total, average, percentage
    public static double[][] calculate(int[][] scores) {
        double[][] result = new double[scores.length][3]; // total, avg, %
        for (int i = 0; i < scores.length; i++) {
            int total = scores[i][0] + scores[i][1] + scores[i][2];
            double avg = total / 3.0;
            double percent = (total / 300.0) * 100;
            result[i][0] = total;
            result[i][1] = Math.round(avg * 100.0) / 100.0;
            result[i][2] = Math.round(percent * 100.0) / 100.0;
        }
        return result;
    }

    // Assign grade
    public static String[] assignGrades(double[][] result) {
        String[] grades = new String[result.length];
        for (int i = 0; i < result.length; i++) {
            double percent = result[i][2];
            if (percent >= 90) grades[i] = "A+";
            else if (percent >= 80) grades[i] = "A";
            else if (percent >= 70) grades[i] = "B";
            else if (percent >= 60) grades[i] = "C";
            else if (percent >= 50) grades[i] = "D";
            else grades[i] = "F";
        }
        return grades;
    }

    // Display scorecard
    public static void display(int[][] scores, double[][] result, String[] grades) {
        System.out.printf("%-5s %-8s %-10s %-8s %-8s %-8s %-10s %-6s\n",
                "ID", "Physics", "Chemistry", "Math", "Total", "Average", "Percent", "Grade");
        System.out.println("--------------------------------------------------------------------------");
        for (int i = 0; i < scores.length; i++) {
            System.out.printf("%-5d %-8d %-10d %-8d %-8.0f %-8.2f %-10.2f %-6s\n",
                    (i + 1), scores[i][0], scores[i][1], scores[i][2],
                    result[i][0], result[i][1], result[i][2], grades[i]);
        }
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        System.out.print("Enter number of students: ");
        int n = sc.nextInt();

        int[][] scores = generateScores(n);
        double[][] result = calculate(scores);
        String[] grades = assignGrades(result);

        System.out.println("\nStudent Scorecard:");
        display(scores, result, grades);

        sc.close();
    }
}

//21.BMI of 10 Team Members
import java.util.Scanner;

public class BMICalculatorDemo {

    // Method to calculate BMI and status
    public static String[][] calculateBMI(double[][] hw) {
        String[][] result = new String[hw.length][4]; // Height, Weight, BMI, Status

        for (int i = 0; i < hw.length; i++) {
            double weight = hw[i][0];
            double heightCm = hw[i][1];
            double heightM = heightCm / 100.0;

            double bmi = weight / (heightM * heightM);
            String status;
            if (bmi < 18.5) status = "Underweight";
            else if (bmi < 25) status = "Normal";
            else if (bmi < 30) status = "Overweight";
            else status = "Obese";

            result[i][0] = String.valueOf(weight);
            result[i][1] = String.valueOf(heightCm);
            result[i][2] = String.format("%.2f", bmi);
            result[i][3] = status;
        }
        return result;
    }

    // Method to display results
    public static void display(String[][] data) {
        System.out.printf("%-8s %-8s %-8s %-12s\n", "Weight", "Height", "BMI", "Status");
        System.out.println("------------------------------------");
        for (String[] row : data) {
            System.out.printf("%-8s %-8s %-8s %-12s\n", row[0], row[1], row[2], row[3]);
        }
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        double[][] hw = new double[10][2]; // 10 persons, [weight, height]

        for (int i = 0; i < 10; i++) {
            System.out.print("Enter weight (kg) for person " + (i + 1) + ": ");
            hw[i][0] = sc.nextDouble();
            System.out.print("Enter height (cm) for person " + (i + 1) + ": ");
            hw[i][1] = sc.nextDouble();
        }

        String[][] results = calculateBMI(hw);
        System.out.println("\nBMI Report:");
        display(results);

        sc.close();
    }
}

//22.Unique Characters in a String
import java.util.Scanner;

public class UniqueCharactersDemo {

    // Method to get length without length()
    public static int getLength(String text) {
        int count = 0;
        try {
            while (true) {
                text.charAt(count);
                count++;
            }
        } catch (Exception e) {
            return count;
        }
    }

    // Method to find unique characters
    public static char[] findUnique(String text) {
        int n = getLength(text);
        char[] unique = new char[n];
        int index = 0;

        for (int i = 0; i < n; i++) {
            char c = text.charAt(i);
            boolean found = false;
            for (int j = 0; j < i; j++) {
                if (text.charAt(j) == c) {
                    found = true;
                    break;
                }
            }
            if (!found) {
                unique[index++] = c;
            }
        }

        // Trim array
        char[] result = new char[index];
        for (int i = 0; i < index; i++) result[i] = unique[i];
        return result;
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter a string: ");
        String text = sc.nextLine();

        char[] unique = findUnique(text);
        System.out.print("Unique characters: ");
        for (char c : unique) System.out.print(c + " ");

        sc.close();
    }
}

//23.First Non-Repeating Character
import java.util.Scanner;

public class FirstNonRepeatingDemo {

    public static char findFirstNonRepeating(String text) {
        int[] freq = new int[256];
        for (int i = 0; i < text.length(); i++) {
            freq[text.charAt(i)]++;
        }

        for (int i = 0; i < text.length(); i++) {
            if (freq[text.charAt(i)] == 1) return text.charAt(i);
        }
        return '\0';
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter a string: ");
        String text = sc.nextLine();

        char result = findFirstNonRepeating(text);
        if (result == '\0')
            System.out.println("No non-repeating character found.");
        else
            System.out.println("First non-repeating character: " + result);

        sc.close();
    }
}

//24.Frequency of Characters
import java.util.Scanner;

public class FrequencyDemo {

    public static String[][] findFrequency(String text) {
        int[] freq = new int[256];

        for (int i = 0; i < text.length(); i++) {
            freq[text.charAt(i)]++;
        }

        String[][] result = new String[text.length()][2];
        int index = 0;

        for (int i = 0; i < text.length(); i++) {
            char c = text.charAt(i);
            if (freq[c] != 0) {
                result[index][0] = String.valueOf(c);
                result[index][1] = String.valueOf(freq[c]);
                freq[c] = 0;
                index++;
            }
        }

        // Trim
        String[][] trimmed = new String[index][2];
        for (int i = 0; i < index; i++) trimmed[i] = result[i];

        return trimmed;
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter a string: ");
        String text = sc.nextLine();

        String[][] freq = findFrequency(text);
        System.out.println("Character Frequencies:");
        for (String[] row : freq) {
            System.out.println(row[0] + " : " + row[1]);
        }

        sc.close();
    }
}

//25.Palindrome Check (3 Methods)
import java.util.Scanner;

public class PalindromeDemo {

    // Logic 1: Iterative
    public static boolean isPalindromeIterative(String text) {
        int start = 0, end = text.length() - 1;
        while (start < end) {
            if (text.charAt(start) != text.charAt(end)) return false;
            start++;
            end--;
        }
        return true;
    }

    // Logic 2: Recursive
    public static boolean isPalindromeRecursive(String text, int start, int end) {
        if (start >= end) return true;
        if (text.charAt(start) != text.charAt(end)) return false;
        return isPalindromeRecursive(text, start + 1, end - 1);
    }

    // Logic 3: Using reverse
    public static boolean isPalindromeReverse(String text) {
        char[] original = text.toCharArray();
        char[] reverse = new char[original.length];
        for (int i = 0; i < original.length; i++) {
            reverse[i] = text.charAt(original.length - 1 - i);
        }
        for (int i = 0; i < original.length; i++) {
            if (original[i] != reverse[i]) return false;
        }
        return true;
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter text: ");
        String text = sc.nextLine();

        System.out.println("Iterative check: " + isPalindromeIterative(text));
        System.out.println("Recursive check: " + isPalindromeRecursive(text, 0, text.length() - 1));
        System.out.println("Reverse-array check: " + isPalindromeReverse(text));

        sc.close();
    }
}

//26.Anagram Check
import java.util.Scanner;

public class AnagramDemo {

    public static boolean isAnagram(String s1, String s2) {
        if (s1.length() != s2.length()) return false;

        int[] freq1 = new int[256];
        int[] freq2 = new int[256];

        for (int i = 0; i < s1.length(); i++) {
            freq1[s1.charAt(i)]++;
            freq2[s2.charAt(i)]++;
        }

        for (int i = 0; i < 256; i++) {
            if (freq1[i] != freq2[i]) return false;
        }
        return true;
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter first word: ");
        String s1 = sc.nextLine();
        System.out.print("Enter second word: ");
        String s2 = sc.nextLine();

        if (isAnagram(s1, s2)) {
            System.out.println(s1 + " and " + s2 + " are Anagrams.");
        } else {
            System.out.println(s1 + " and " + s2 + " are NOT Anagrams.");
        }

        sc.close();
    }
}

//27.Calendar Generator
import java.util.Scanner;

public class CalendarDemo {

    // Get month name
    public static String getMonthName(int month) {
        String[] months = {"January", "February", "March", "April", "May", "June",
                           "July", "August", "September", "October", "November", "December"};
        return months[month - 1];
    }

    // Check Leap Year
    public static boolean isLeapYear(int year) {
        return (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);
    }

    // Get days in month
    public static int getDaysInMonth(int month, int year) {
        int[] days = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
        if (month == 2 && isLeapYear(year)) return 29;
        return days[month - 1];
    }

    // First day of month (Zeller’s Congruence)
    public static int getFirstDay(int month, int year) {
        int d = 1; // first day
        int y0 = year - (14 - month) / 12;
        int x = y0 + y0 / 4 - y0 / 100 + y0 / 400;
        int m0 = month + 12 * ((14 - month) / 12) - 2;
        return (d + x + (31 * m0) / 12) % 7;
    }

    // Print Calendar
    public static void printCalendar(int month, int year) {
        System.out.println("     " + getMonthName(month) + " " + year);
        System.out.println("Sun Mon Tue Wed Thu Fri Sat");

        int firstDay = getFirstDay(month, year);
        int daysInMonth = getDaysInMonth(month, year);

        // spacing
        for (int i = 0; i < firstDay; i++) System.out.print("    ");

        for (int day = 1; day <= daysInMonth; day++) {
            System.out.printf("%3d ", day);
            if (((day + firstDay) % 7 == 0) || day == daysInMonth) System.out.println();
        }
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter month (1-12): ");
        int month = sc.nextInt();
        System.out.print("Enter year: ");
        int year = sc.nextInt();

        printCalendar(month, year);
        sc.close();
    }
}

//28.Deck of Cards
import java.util.Scanner;

public class DeckOfCardsDemo {

    // Initialize deck
    public static String[] initializeDeck() {
        String[] suits = {"Hearts", "Diamonds", "Clubs", "Spades"};
        String[] ranks = {"2", "3", "4", "5", "6", "7", "8", "9", "10", "Jack", "Queen", "King", "Ace"};

        int numOfCards = suits.length * ranks.length;
        String[] deck = new String[numOfCards];

        int index = 0;
        for (String suit : suits) {
            for (String rank : ranks) {
                deck[index++] = rank + " of " + suit;
            }
        }
        return deck;
    }

    // Shuffle deck
    public static void shuffleDeck(String[] deck) {
        for (int i = 0; i < deck.length; i++) {
            int randomCardNumber = i + (int) (Math.random() * (deck.length - i));
            String temp = deck[i];
            deck[i] = deck[randomCardNumber];
            deck[randomCardNumber] = temp;
        }
    }

    // Distribute cards
    public static String[][] distribute(String[] deck, int players, int cardsEach) {
        if (players * cardsEach > deck.length) {
            System.out.println("Not enough cards to distribute!");
            return null;
        }

        String[][] playerCards = new String[players][cardsEach];
        int index = 0;

        for (int i = 0; i < players; i++) {
            for (int j = 0; j < cardsEach; j++) {
                playerCards[i][j] = deck[index++];
            }
        }
        return playerCards;
    }

    // Print players cards
    public static void printPlayers(String[][] players) {
        for (int i = 0; i < players.length; i++) {
            System.out.print("Player " + (i + 1) + ": ");
            for (int j = 0; j < players[i].length; j++) {
                System.out.print(players[i][j] + " | ");
            }
            System.out.println();
        }
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        String[] deck = initializeDeck();
        shuffleDeck(deck);

        System.out.print("Enter number of players: ");
        int players = sc.nextInt();
        System.out.print("Enter number of cards each player should get: ");
        int cardsEach = sc.nextInt();

        String[][] distributed = distribute(deck, players, cardsEach);
        if (distributed != null) {
            printPlayers(distributed);
        }

        sc.close();
    }
}

//29.Voting Eligibility (10 Students)
import java.util.Scanner;

public class VotingEligibility {

    // Method to generate ages of n students
    public static int[] getAges(int n) {
        int[] ages = new int[n];
        for (int i = 0; i < n; i++) {
            ages[i] = 10 + (int)(Math.random() * 15); // random age between 10-24
        }
        return ages;
    }

    // Method to check eligibility and return 2D array
    public static String[][] checkEligibility(int[] ages) {
        String[][] result = new String[ages.length][2];
        for (int i = 0; i < ages.length; i++) {
            result[i][0] = String.valueOf(ages[i]);
            if (ages[i] < 0) {
                result[i][1] = "false (Invalid)";
            } else if (ages[i] >= 18) {
                result[i][1] = "true";
            } else {
                result[i][1] = "false";
            }
        }
        return result;
    }

    // Method to display results
    public static void display(String[][] data) {
        System.out.println("Age\tCan Vote?");
        for (int i = 0; i < data.length; i++) {
            System.out.println(data[i][0] + "\t" + data[i][1]);
        }
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int n = 10; // fixed as per problem
        int[] ages = getAges(n);

        String[][] eligibility = checkEligibility(ages);

        display(eligibility);

        sc.close();
    }
}

//30.Rock-Paper-Scissors (Player vs Computer)
import java.util.Scanner;

public class RockPaperScissors {

    // Method to get computer choice
    public static String getComputerChoice() {
        int choice = (int)(Math.random() * 3);
        switch (choice) {
            case 0: return "Rock";
            case 1: return "Paper";
            default: return "Scissors";
        }
    }

    // Method to find winner
    public static String findWinner(String player, String computer) {
        if (player.equals(computer)) return "Draw";

        switch (player) {
            case "Rock": return (computer.equals("Scissors")) ? "Player" : "Computer";
            case "Paper": return (computer.equals("Rock")) ? "Player" : "Computer";
            case "Scissors": return (computer.equals("Paper")) ? "Player" : "Computer";
        }
        return "Invalid";
    }

    // Method to calculate win percentages
    public static void showStats(int playerWins, int compWins, int games) {
        double playerPercent = (playerWins * 100.0) / games;
        double compPercent = (compWins * 100.0) / games;

        System.out.println("\n--- Final Stats ---");
        System.out.println("Player Wins: " + playerWins + " (" + playerPercent + "%)");
        System.out.println("Computer Wins: " + compWins + " (" + compPercent + "%)");
        System.out.println("Draws: " + (games - playerWins - compWins));
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        System.out.print("Enter number of games: ");
        int games = sc.nextInt();

        int playerWins = 0, compWins = 0;

        for (int i = 1; i <= games; i++) {
            System.out.print("\nGame " + i + " - Enter Rock, Paper or Scissors: ");
            String player = sc.next();
            String computer = getComputerChoice();
            System.out.println("Computer chose: " + computer);

            String winner = findWinner(player, computer);

            if (winner.equals("Player")) {
                playerWins++;
                System.out.println("You win this round!");
            } else if (winner.equals("Computer")) {
                compWins++;
                System.out.println("Computer wins this round!");
            } else {
                System.out.println("It's a draw!");
            }
        }

        showStats(playerWins, compWins, games);

        sc.close();
    }
}























